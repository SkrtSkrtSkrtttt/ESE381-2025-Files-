
usart3_avr128_cir_buff.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00804000  00804000  000007c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034f2  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e8a  00000000  00000000  00003d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f3  00000000  00000000  00006bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000070f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018b4  00000000  00000000  000071bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000210  00000000  00000000  00008a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00008c80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_53>
  d8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_54>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a5 32       	cpi	r26, 0x25	; 37
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
 114:	0c 94 a4 03 	jmp	0x748	; 0x748 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <USART3_Init>:
}



// Function to initialize USART3
void USART3_Init(uint16_t baud, uint8_t data_bits, unsigned char parity){
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	c6 2f       	mov	r28, r22
 122:	d4 2f       	mov	r29, r20
	
	PORTB.DIR = 0x01; // make the whole port an input.; // make the single pin an output.
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	20 93 20 04 	sts	0x0420, r18	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
	
	USART3.BAUD =  (uint16_t)USART3_BAUD_RATE(baud);      //baud rate
 12a:	bc 01       	movw	r22, r24
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e8       	ldi	r20, 0x80	; 128
 13a:	51 e4       	ldi	r21, 0x41	; 65
 13c:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 140:	9b 01       	movw	r18, r22
 142:	ac 01       	movw	r20, r24
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	74 e2       	ldi	r23, 0x24	; 36
 148:	84 e7       	ldi	r24, 0x74	; 116
 14a:	9d e4       	ldi	r25, 0x4D	; 77
 14c:	0e 94 08 02 	call	0x410	; 0x410 <__divsf3>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	5f e3       	ldi	r21, 0x3F	; 63
 158:	0e 94 9c 01 	call	0x338	; 0x338 <__addsf3>
 15c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fixunssfsi>
 160:	e0 e6       	ldi	r30, 0x60	; 96
 162:	f8 e0       	ldi	r31, 0x08	; 8
 164:	60 87       	std	Z+8, r22	; 0x08
 166:	71 87       	std	Z+9, r23	; 0x09
	
	USART3.CTRLB =  0b11000000;    //transmitter and receiver enabling  as output
 168:	80 ec       	ldi	r24, 0xC0	; 192
 16a:	86 83       	std	Z+6, r24	; 0x06
	
	
	cntrlcBM =  0x00 ;    //frame format
 16c:	10 92 24 40 	sts	0x4024, r1	; 0x804024 <cntrlcBM>
	//data bits format:

	switch(data_bits) {
 170:	c6 30       	cpi	r28, 0x06	; 6
 172:	71 f0       	breq	.+28     	; 0x190 <USART3_Init+0x74>
 174:	18 f4       	brcc	.+6      	; 0x17c <USART3_Init+0x60>
 176:	c5 30       	cpi	r28, 0x05	; 5
 178:	31 f0       	breq	.+12     	; 0x186 <USART3_Init+0x6a>
 17a:	1c c0       	rjmp	.+56     	; 0x1b4 <USART3_Init+0x98>
 17c:	c7 30       	cpi	r28, 0x07	; 7
 17e:	71 f0       	breq	.+28     	; 0x19c <USART3_Init+0x80>
 180:	c8 30       	cpi	r28, 0x08	; 8
 182:	91 f0       	breq	.+36     	; 0x1a8 <USART3_Init+0x8c>
 184:	17 c0       	rjmp	.+46     	; 0x1b4 <USART3_Init+0x98>
		case 5:
		cntrlcBM |= 0x00;
 186:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 18a:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
 18e:	16 c0       	rjmp	.+44     	; 0x1bc <USART3_Init+0xa0>
		case 6:
		cntrlcBM |= 0x01;
 190:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
 19a:	10 c0       	rjmp	.+32     	; 0x1bc <USART3_Init+0xa0>
		case 7:
		cntrlcBM |= 0x02;
 19c:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
 1a6:	0a c0       	rjmp	.+20     	; 0x1bc <USART3_Init+0xa0>
		case 8:
		cntrlcBM |= 0x03;
 1a8:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 1ac:	83 60       	ori	r24, 0x03	; 3
 1ae:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <USART3_Init+0xa0>
		default:
		cntrlcBM |= 0x00; //not valid choice
 1b4:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 1b8:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
	}

	//stop bit mode:
	
	cntrlcBM |= 0x00; //1 stop bit
 1bc:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 1c0:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
	//cntrlcBM |= 0x04; // 2 stop bits

	//parity format:
	
	
	switch(parity) {
 1c4:	d5 34       	cpi	r29, 0x45	; 69
 1c6:	49 f0       	breq	.+18     	; 0x1da <USART3_Init+0xbe>
 1c8:	df 34       	cpi	r29, 0x4F	; 79
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <USART3_Init+0xca>
 1cc:	d4 34       	cpi	r29, 0x44	; 68
 1ce:	89 f4       	brne	.+34     	; 0x1f2 <USART3_Init+0xd6>
		case 'D':
		cntrlcBM |= 0x00;
 1d0:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 1d4:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
 1d8:	10 c0       	rjmp	.+32     	; 0x1fa <USART3_Init+0xde>
		case 'E':
		cntrlcBM |= 0x20;
 1da:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
 1e4:	0a c0       	rjmp	.+20     	; 0x1fa <USART3_Init+0xde>
		case 'O':
		cntrlcBM |= 0x30;
 1e6:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 1ea:	80 63       	ori	r24, 0x30	; 48
 1ec:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <USART3_Init+0xde>
		default:
		cntrlcBM |= 0x00; //not valid choice
 1f2:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <cntrlcBM>
 1f6:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <cntrlcBM>
		break;
	}
	
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <__vector_53>:


/* Interrupt handlers */

ISR (USART3_RXC_vect)		//Receive complete interrupt
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	//The following variable is not necessary if you are not going to take any action
	//for an overflow that requires keeping the old index. Instead just use
	//USART_RxHead instead of tmphead.
	uint8_t tmphead;
	
	cli();		// Clear global interrupt flag
 216:	f8 94       	cli

	/* Read the received data */
	data = USART3.RXDATAL;
 218:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
	
	/* Calculate buffer index, increment and possibly roll over index */
	tmphead = ( USART_RxHead + 1 ) & USART_RX_BUFFER_MASK;
 21c:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <USART_RxHead>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	8f 70       	andi	r24, 0x0F	; 15
	if ( tmphead == USART_RxTail )
	{
		// ERROR! Receive buffer overflow
	}
	
	USART_RxBuf[tmphead] = data; // Store received data in buffer
 224:	e8 2f       	mov	r30, r24
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	ec 5e       	subi	r30, 0xEC	; 236
 22a:	ff 4b       	sbci	r31, 0xBF	; 191
 22c:	90 83       	st	Z, r25
	//Alternate position B for USART_RxHead = tmphead;
	USART_RxHead = tmphead;      // Store new index (was prev. in position A)
 22e:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <USART_RxHead>
	sei();		// re enable global interrupts
 232:	78 94       	sei
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_54>:


ISR (USART3_DRE_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	8f 93       	push	r24
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	uint8_t tmptail;
	cli();		// Clear global interrupts
 25e:	f8 94       	cli

	/* Check if all data is transmitted */
	if ( USART_TxHead != USART_TxTail )
 260:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <USART_TxHead>
 264:	e0 91 00 40 	lds	r30, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 268:	8e 17       	cp	r24, r30
 26a:	59 f0       	breq	.+22     	; 0x282 <__vector_54+0x38>
	{
		// Calculate buffer index
		tmptail = ( USART_TxTail + 1 ) & USART_TX_BUFFER_MASK;
 26c:	ef 5f       	subi	r30, 0xFF	; 255
 26e:	ef 70       	andi	r30, 0x0F	; 15
		USART_TxTail = tmptail;      // Store new index
 270:	e0 93 00 40 	sts	0x4000, r30	; 0x804000 <__DATA_REGION_ORIGIN__>
		
		USART3.TXDATAL = USART_TxBuf[tmptail];  // Start transmission
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ee 5f       	subi	r30, 0xFE	; 254
 278:	ff 4b       	sbci	r31, 0xBF	; 191
 27a:	80 81       	ld	r24, Z
 27c:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 280:	05 c0       	rjmp	.+10     	; 0x28c <__vector_54+0x42>
	}
	else
	{
		USART3.CTRLA &= ~(USART_DREIE_bm);     // Disable UDRE interrupt
 282:	e0 e6       	ldi	r30, 0x60	; 96
 284:	f8 e0       	ldi	r31, 0x08	; 8
 286:	85 81       	ldd	r24, Z+5	; 0x05
 288:	8f 7d       	andi	r24, 0xDF	; 223
 28a:	85 83       	std	Z+5, r24	; 0x05
	}
	sei();
 28c:	78 94       	sei
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0b be       	out	0x3b, r0	; 59
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <USART3_Receive>:
/* Read function */
unsigned char USART3_Receive( void )
{
	uint8_t tmptail;
	
	while ( USART_RxHead == USART_RxTail );  /* Wait for incomming data */
 2a2:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <USART_RxHead>
 2a6:	e0 91 12 40 	lds	r30, 0x4012	; 0x804012 <USART_RxTail>
 2aa:	8e 17       	cp	r24, r30
 2ac:	d1 f3       	breq	.-12     	; 0x2a2 <USART3_Receive>
	tmptail = ( USART_RxTail + 1 ) & USART_RX_BUFFER_MASK;/* Calculate buffer index */
 2ae:	ef 5f       	subi	r30, 0xFF	; 255
 2b0:	ef 70       	andi	r30, 0x0F	; 15
	USART_RxTail = tmptail;                /* Store new index */
 2b2:	e0 93 12 40 	sts	0x4012, r30	; 0x804012 <USART_RxTail>
	return USART_RxBuf[tmptail];           /* Return data */
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	ec 5e       	subi	r30, 0xEC	; 236
 2ba:	ff 4b       	sbci	r31, 0xBF	; 191
}
 2bc:	80 81       	ld	r24, Z
 2be:	08 95       	ret

000002c0 <USART3_Transmit>:
/* Write function */
void USART3_Transmit( uint8_t data )
{
	uint8_t tmphead;
	/* Calculate buffer index */
	tmphead = ( USART_TxHead + 1 ) & USART_TX_BUFFER_MASK; /* Wait for free space in buffer */
 2c0:	20 91 01 40 	lds	r18, 0x4001	; 0x804001 <USART_TxHead>
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
 2c6:	2f 70       	andi	r18, 0x0F	; 15
	while ( tmphead == USART_TxTail );
 2c8:	90 91 00 40 	lds	r25, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 2cc:	29 17       	cp	r18, r25
 2ce:	e1 f3       	breq	.-8      	; 0x2c8 <USART3_Transmit+0x8>
	USART_TxBuf[tmphead] = data;           /* Store data in buffer */
 2d0:	e2 2f       	mov	r30, r18
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ee 5f       	subi	r30, 0xFE	; 254
 2d6:	ff 4b       	sbci	r31, 0xBF	; 191
 2d8:	80 83       	st	Z, r24
	USART_TxHead = tmphead;                /* Store new index */
 2da:	20 93 01 40 	sts	0x4001, r18	; 0x804001 <USART_TxHead>

	USART3.CTRLA |= USART_DREIE_bm;                    /* Enable UDRE interrupt */
 2de:	e0 e6       	ldi	r30, 0x60	; 96
 2e0:	f8 e0       	ldi	r31, 0x08	; 8
 2e2:	85 81       	ldd	r24, Z+5	; 0x05
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	85 83       	std	Z+5, r24	; 0x05
 2e8:	08 95       	ret

000002ea <main>:


/* Main - a simple test program*/
int main( void )
{
	USART_RxTail = 0x00;	//clear buffer indexes, not really necessary
 2ea:	10 92 12 40 	sts	0x4012, r1	; 0x804012 <USART_RxTail>
	USART_RxHead = 0x00;	//because they are automatically cleared since
 2ee:	10 92 13 40 	sts	0x4013, r1	; 0x804013 <USART_RxHead>
	USART_TxTail = 0x00;	//declared as global uninitialized variables
 2f2:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
	USART_TxHead = 0x00;
 2f6:	10 92 01 40 	sts	0x4001, r1	; 0x804001 <USART_TxHead>

	// SW0 pin an input, must be pressed to transfer data from Rx to Tx buffer
	PORTB.DIR &= ~PIN2_bm;		// SW0 pin pushbutton input
 2fa:	e0 e2       	ldi	r30, 0x20	; 32
 2fc:	f4 e0       	ldi	r31, 0x04	; 4
 2fe:	80 81       	ld	r24, Z
 300:	8b 7f       	andi	r24, 0xFB	; 251
 302:	80 83       	st	Z, r24
	PORTB.PIN2CTRL = 0x08;		//enable pull up
 304:	88 e0       	ldi	r24, 0x08	; 8
 306:	82 8b       	std	Z+18, r24	; 0x12
	//USART3_Init();   // Initialize USART3
	USART3_Init( 9600,8,'D');   // Initialize USART3
 308:	44 e4       	ldi	r20, 0x44	; 68
 30a:	68 e0       	ldi	r22, 0x08	; 8
 30c:	80 e8       	ldi	r24, 0x80	; 128
 30e:	95 e2       	ldi	r25, 0x25	; 37
 310:	0e 94 8e 00 	call	0x11c	; 0x11c <USART3_Init>
	USART3.CTRLA |= USART_RXCIE_bm; /* Receive Complete Interrupt must be enabled */
 314:	e0 e6       	ldi	r30, 0x60	; 96
 316:	f8 e0       	ldi	r31, 0x08	; 8
 318:	85 81       	ldd	r24, Z+5	; 0x05
 31a:	80 68       	ori	r24, 0x80	; 128
 31c:	85 83       	std	Z+5, r24	; 0x05
	sei();           // Enable global interrupts => enable USART interrupts
 31e:	78 94       	sei
	for( ; ; )        // Forever
	{
		//Uncomment next statement to have operation independent of SW0
		USART3_Transmit( USART3_Receive() );
 320:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART3_Receive>
 324:	0e 94 60 01 	call	0x2c0	; 0x2c0 <USART3_Transmit>

		//Uncomment next statement have operation dependent on SW0
		if (!(VPORTB_IN & PIN2_bm)) USART3_Transmit( USART3_Receive() );
 328:	32 99       	sbic	0x06, 2	; 6
 32a:	fa cf       	rjmp	.-12     	; 0x320 <main+0x36>
 32c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART3_Receive>
 330:	0e 94 60 01 	call	0x2c0	; 0x2c0 <USART3_Transmit>
 334:	f5 cf       	rjmp	.-22     	; 0x320 <main+0x36>

00000336 <__subsf3>:
 336:	50 58       	subi	r21, 0x80	; 128

00000338 <__addsf3>:
 338:	bb 27       	eor	r27, r27
 33a:	aa 27       	eor	r26, r26
 33c:	0e 94 b3 01 	call	0x366	; 0x366 <__addsf3x>
 340:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_round>
 344:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscA>
 348:	38 f0       	brcs	.+14     	; 0x358 <__addsf3+0x20>
 34a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__fp_pscB>
 34e:	20 f0       	brcs	.+8      	; 0x358 <__addsf3+0x20>
 350:	39 f4       	brne	.+14     	; 0x360 <__addsf3+0x28>
 352:	9f 3f       	cpi	r25, 0xFF	; 255
 354:	19 f4       	brne	.+6      	; 0x35c <__addsf3+0x24>
 356:	26 f4       	brtc	.+8      	; 0x360 <__addsf3+0x28>
 358:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_nan>
 35c:	0e f4       	brtc	.+2      	; 0x360 <__addsf3+0x28>
 35e:	e0 95       	com	r30
 360:	e7 fb       	bst	r30, 7
 362:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_inf>

00000366 <__addsf3x>:
 366:	e9 2f       	mov	r30, r25
 368:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_split3>
 36c:	58 f3       	brcs	.-42     	; 0x344 <__addsf3+0xc>
 36e:	ba 17       	cp	r27, r26
 370:	62 07       	cpc	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	95 07       	cpc	r25, r21
 378:	20 f0       	brcs	.+8      	; 0x382 <__addsf3x+0x1c>
 37a:	79 f4       	brne	.+30     	; 0x39a <__addsf3x+0x34>
 37c:	a6 f5       	brtc	.+104    	; 0x3e6 <__addsf3x+0x80>
 37e:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_zero>
 382:	0e f4       	brtc	.+2      	; 0x386 <__addsf3x+0x20>
 384:	e0 95       	com	r30
 386:	0b 2e       	mov	r0, r27
 388:	ba 2f       	mov	r27, r26
 38a:	a0 2d       	mov	r26, r0
 38c:	0b 01       	movw	r0, r22
 38e:	b9 01       	movw	r22, r18
 390:	90 01       	movw	r18, r0
 392:	0c 01       	movw	r0, r24
 394:	ca 01       	movw	r24, r20
 396:	a0 01       	movw	r20, r0
 398:	11 24       	eor	r1, r1
 39a:	ff 27       	eor	r31, r31
 39c:	59 1b       	sub	r21, r25
 39e:	99 f0       	breq	.+38     	; 0x3c6 <__addsf3x+0x60>
 3a0:	59 3f       	cpi	r21, 0xF9	; 249
 3a2:	50 f4       	brcc	.+20     	; 0x3b8 <__addsf3x+0x52>
 3a4:	50 3e       	cpi	r21, 0xE0	; 224
 3a6:	68 f1       	brcs	.+90     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3a8:	1a 16       	cp	r1, r26
 3aa:	f0 40       	sbci	r31, 0x00	; 0
 3ac:	a2 2f       	mov	r26, r18
 3ae:	23 2f       	mov	r18, r19
 3b0:	34 2f       	mov	r19, r20
 3b2:	44 27       	eor	r20, r20
 3b4:	58 5f       	subi	r21, 0xF8	; 248
 3b6:	f3 cf       	rjmp	.-26     	; 0x39e <__addsf3x+0x38>
 3b8:	46 95       	lsr	r20
 3ba:	37 95       	ror	r19
 3bc:	27 95       	ror	r18
 3be:	a7 95       	ror	r26
 3c0:	f0 40       	sbci	r31, 0x00	; 0
 3c2:	53 95       	inc	r21
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__addsf3x+0x52>
 3c6:	7e f4       	brtc	.+30     	; 0x3e6 <__addsf3x+0x80>
 3c8:	1f 16       	cp	r1, r31
 3ca:	ba 0b       	sbc	r27, r26
 3cc:	62 0b       	sbc	r22, r18
 3ce:	73 0b       	sbc	r23, r19
 3d0:	84 0b       	sbc	r24, r20
 3d2:	ba f0       	brmi	.+46     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	a1 f0       	breq	.+40     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d8:	ff 0f       	add	r31, r31
 3da:	bb 1f       	adc	r27, r27
 3dc:	66 1f       	adc	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	88 1f       	adc	r24, r24
 3e2:	c2 f7       	brpl	.-16     	; 0x3d4 <__addsf3x+0x6e>
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e6:	ba 0f       	add	r27, r26
 3e8:	62 1f       	adc	r22, r18
 3ea:	73 1f       	adc	r23, r19
 3ec:	84 1f       	adc	r24, r20
 3ee:	48 f4       	brcc	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f0:	87 95       	ror	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	b7 95       	ror	r27
 3f8:	f7 95       	ror	r31
 3fa:	9e 3f       	cpi	r25, 0xFE	; 254
 3fc:	08 f0       	brcs	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	b0 cf       	rjmp	.-160    	; 0x360 <__addsf3+0x28>
 400:	93 95       	inc	r25
 402:	88 0f       	add	r24, r24
 404:	08 f0       	brcs	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	99 27       	eor	r25, r25
 408:	ee 0f       	add	r30, r30
 40a:	97 95       	ror	r25
 40c:	87 95       	ror	r24
 40e:	08 95       	ret

00000410 <__divsf3>:
 410:	0e 94 1c 02 	call	0x438	; 0x438 <__divsf3x>
 414:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_round>
 418:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__fp_pscB>
 41c:	58 f0       	brcs	.+22     	; 0x434 <__divsf3+0x24>
 41e:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscA>
 422:	40 f0       	brcs	.+16     	; 0x434 <__divsf3+0x24>
 424:	29 f4       	brne	.+10     	; 0x430 <__divsf3+0x20>
 426:	5f 3f       	cpi	r21, 0xFF	; 255
 428:	29 f0       	breq	.+10     	; 0x434 <__divsf3+0x24>
 42a:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_inf>
 42e:	51 11       	cpse	r21, r1
 430:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_szero>
 434:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_nan>

00000438 <__divsf3x>:
 438:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_split3>
 43c:	68 f3       	brcs	.-38     	; 0x418 <__divsf3+0x8>

0000043e <__divsf3_pse>:
 43e:	99 23       	and	r25, r25
 440:	b1 f3       	breq	.-20     	; 0x42e <__divsf3+0x1e>
 442:	55 23       	and	r21, r21
 444:	91 f3       	breq	.-28     	; 0x42a <__divsf3+0x1a>
 446:	95 1b       	sub	r25, r21
 448:	55 0b       	sbc	r21, r21
 44a:	bb 27       	eor	r27, r27
 44c:	aa 27       	eor	r26, r26
 44e:	62 17       	cp	r22, r18
 450:	73 07       	cpc	r23, r19
 452:	84 07       	cpc	r24, r20
 454:	38 f0       	brcs	.+14     	; 0x464 <__divsf3_pse+0x26>
 456:	9f 5f       	subi	r25, 0xFF	; 255
 458:	5f 4f       	sbci	r21, 0xFF	; 255
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	44 1f       	adc	r20, r20
 460:	aa 1f       	adc	r26, r26
 462:	a9 f3       	breq	.-22     	; 0x44e <__divsf3_pse+0x10>
 464:	35 d0       	rcall	.+106    	; 0x4d0 <__divsf3_pse+0x92>
 466:	0e 2e       	mov	r0, r30
 468:	3a f0       	brmi	.+14     	; 0x478 <__divsf3_pse+0x3a>
 46a:	e0 e8       	ldi	r30, 0x80	; 128
 46c:	32 d0       	rcall	.+100    	; 0x4d2 <__divsf3_pse+0x94>
 46e:	91 50       	subi	r25, 0x01	; 1
 470:	50 40       	sbci	r21, 0x00	; 0
 472:	e6 95       	lsr	r30
 474:	00 1c       	adc	r0, r0
 476:	ca f7       	brpl	.-14     	; 0x46a <__divsf3_pse+0x2c>
 478:	2b d0       	rcall	.+86     	; 0x4d0 <__divsf3_pse+0x92>
 47a:	fe 2f       	mov	r31, r30
 47c:	29 d0       	rcall	.+82     	; 0x4d0 <__divsf3_pse+0x92>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	88 1f       	adc	r24, r24
 484:	bb 1f       	adc	r27, r27
 486:	26 17       	cp	r18, r22
 488:	37 07       	cpc	r19, r23
 48a:	48 07       	cpc	r20, r24
 48c:	ab 07       	cpc	r26, r27
 48e:	b0 e8       	ldi	r27, 0x80	; 128
 490:	09 f0       	breq	.+2      	; 0x494 <__divsf3_pse+0x56>
 492:	bb 0b       	sbc	r27, r27
 494:	80 2d       	mov	r24, r0
 496:	bf 01       	movw	r22, r30
 498:	ff 27       	eor	r31, r31
 49a:	93 58       	subi	r25, 0x83	; 131
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	3a f0       	brmi	.+14     	; 0x4ae <__divsf3_pse+0x70>
 4a0:	9e 3f       	cpi	r25, 0xFE	; 254
 4a2:	51 05       	cpc	r21, r1
 4a4:	78 f0       	brcs	.+30     	; 0x4c4 <__divsf3_pse+0x86>
 4a6:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_inf>
 4aa:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_szero>
 4ae:	5f 3f       	cpi	r21, 0xFF	; 255
 4b0:	e4 f3       	brlt	.-8      	; 0x4aa <__divsf3_pse+0x6c>
 4b2:	98 3e       	cpi	r25, 0xE8	; 232
 4b4:	d4 f3       	brlt	.-12     	; 0x4aa <__divsf3_pse+0x6c>
 4b6:	86 95       	lsr	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f7 95       	ror	r31
 4c0:	9f 5f       	subi	r25, 0xFF	; 255
 4c2:	c9 f7       	brne	.-14     	; 0x4b6 <__divsf3_pse+0x78>
 4c4:	88 0f       	add	r24, r24
 4c6:	91 1d       	adc	r25, r1
 4c8:	96 95       	lsr	r25
 4ca:	87 95       	ror	r24
 4cc:	97 f9       	bld	r25, 7
 4ce:	08 95       	ret
 4d0:	e1 e0       	ldi	r30, 0x01	; 1
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	bb 1f       	adc	r27, r27
 4da:	62 17       	cp	r22, r18
 4dc:	73 07       	cpc	r23, r19
 4de:	84 07       	cpc	r24, r20
 4e0:	ba 07       	cpc	r27, r26
 4e2:	20 f0       	brcs	.+8      	; 0x4ec <__divsf3_pse+0xae>
 4e4:	62 1b       	sub	r22, r18
 4e6:	73 0b       	sbc	r23, r19
 4e8:	84 0b       	sbc	r24, r20
 4ea:	ba 0b       	sbc	r27, r26
 4ec:	ee 1f       	adc	r30, r30
 4ee:	88 f7       	brcc	.-30     	; 0x4d2 <__divsf3_pse+0x94>
 4f0:	e0 95       	com	r30
 4f2:	08 95       	ret

000004f4 <__fixunssfsi>:
 4f4:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_splitA>
 4f8:	88 f0       	brcs	.+34     	; 0x51c <__fixunssfsi+0x28>
 4fa:	9f 57       	subi	r25, 0x7F	; 127
 4fc:	98 f0       	brcs	.+38     	; 0x524 <__fixunssfsi+0x30>
 4fe:	b9 2f       	mov	r27, r25
 500:	99 27       	eor	r25, r25
 502:	b7 51       	subi	r27, 0x17	; 23
 504:	b0 f0       	brcs	.+44     	; 0x532 <__fixunssfsi+0x3e>
 506:	e1 f0       	breq	.+56     	; 0x540 <__fixunssfsi+0x4c>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	1a f0       	brmi	.+6      	; 0x518 <__fixunssfsi+0x24>
 512:	ba 95       	dec	r27
 514:	c9 f7       	brne	.-14     	; 0x508 <__fixunssfsi+0x14>
 516:	14 c0       	rjmp	.+40     	; 0x540 <__fixunssfsi+0x4c>
 518:	b1 30       	cpi	r27, 0x01	; 1
 51a:	91 f0       	breq	.+36     	; 0x540 <__fixunssfsi+0x4c>
 51c:	0e 94 30 03 	call	0x660	; 0x660 <__fp_zero>
 520:	b1 e0       	ldi	r27, 0x01	; 1
 522:	08 95       	ret
 524:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_zero>
 528:	67 2f       	mov	r22, r23
 52a:	78 2f       	mov	r23, r24
 52c:	88 27       	eor	r24, r24
 52e:	b8 5f       	subi	r27, 0xF8	; 248
 530:	39 f0       	breq	.+14     	; 0x540 <__fixunssfsi+0x4c>
 532:	b9 3f       	cpi	r27, 0xF9	; 249
 534:	cc f3       	brlt	.-14     	; 0x528 <__fixunssfsi+0x34>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b3 95       	inc	r27
 53e:	d9 f7       	brne	.-10     	; 0x536 <__fixunssfsi+0x42>
 540:	3e f4       	brtc	.+14     	; 0x550 <__fixunssfsi+0x5c>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	08 95       	ret

00000552 <__floatunsisf>:
 552:	e8 94       	clt
 554:	09 c0       	rjmp	.+18     	; 0x568 <__floatsisf+0x12>

00000556 <__floatsisf>:
 556:	97 fb       	bst	r25, 7
 558:	3e f4       	brtc	.+14     	; 0x568 <__floatsisf+0x12>
 55a:	90 95       	com	r25
 55c:	80 95       	com	r24
 55e:	70 95       	com	r23
 560:	61 95       	neg	r22
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	99 23       	and	r25, r25
 56a:	a9 f0       	breq	.+42     	; 0x596 <__floatsisf+0x40>
 56c:	f9 2f       	mov	r31, r25
 56e:	96 e9       	ldi	r25, 0x96	; 150
 570:	bb 27       	eor	r27, r27
 572:	93 95       	inc	r25
 574:	f6 95       	lsr	r31
 576:	87 95       	ror	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b7 95       	ror	r27
 57e:	f1 11       	cpse	r31, r1
 580:	f8 cf       	rjmp	.-16     	; 0x572 <__floatsisf+0x1c>
 582:	fa f4       	brpl	.+62     	; 0x5c2 <__floatsisf+0x6c>
 584:	bb 0f       	add	r27, r27
 586:	11 f4       	brne	.+4      	; 0x58c <__floatsisf+0x36>
 588:	60 ff       	sbrs	r22, 0
 58a:	1b c0       	rjmp	.+54     	; 0x5c2 <__floatsisf+0x6c>
 58c:	6f 5f       	subi	r22, 0xFF	; 255
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	16 c0       	rjmp	.+44     	; 0x5c2 <__floatsisf+0x6c>
 596:	88 23       	and	r24, r24
 598:	11 f0       	breq	.+4      	; 0x59e <__floatsisf+0x48>
 59a:	96 e9       	ldi	r25, 0x96	; 150
 59c:	11 c0       	rjmp	.+34     	; 0x5c0 <__floatsisf+0x6a>
 59e:	77 23       	and	r23, r23
 5a0:	21 f0       	breq	.+8      	; 0x5aa <__floatsisf+0x54>
 5a2:	9e e8       	ldi	r25, 0x8E	; 142
 5a4:	87 2f       	mov	r24, r23
 5a6:	76 2f       	mov	r23, r22
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <__floatsisf+0x5e>
 5aa:	66 23       	and	r22, r22
 5ac:	71 f0       	breq	.+28     	; 0x5ca <__floatsisf+0x74>
 5ae:	96 e8       	ldi	r25, 0x86	; 134
 5b0:	86 2f       	mov	r24, r22
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	2a f0       	brmi	.+10     	; 0x5c2 <__floatsisf+0x6c>
 5b8:	9a 95       	dec	r25
 5ba:	66 0f       	add	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	da f7       	brpl	.-10     	; 0x5b8 <__floatsisf+0x62>
 5c2:	88 0f       	add	r24, r24
 5c4:	96 95       	lsr	r25
 5c6:	87 95       	ror	r24
 5c8:	97 f9       	bld	r25, 7
 5ca:	08 95       	ret

000005cc <__fp_inf>:
 5cc:	97 f9       	bld	r25, 7
 5ce:	9f 67       	ori	r25, 0x7F	; 127
 5d0:	80 e8       	ldi	r24, 0x80	; 128
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	08 95       	ret

000005d8 <__fp_nan>:
 5d8:	9f ef       	ldi	r25, 0xFF	; 255
 5da:	80 ec       	ldi	r24, 0xC0	; 192
 5dc:	08 95       	ret

000005de <__fp_pscA>:
 5de:	00 24       	eor	r0, r0
 5e0:	0a 94       	dec	r0
 5e2:	16 16       	cp	r1, r22
 5e4:	17 06       	cpc	r1, r23
 5e6:	18 06       	cpc	r1, r24
 5e8:	09 06       	cpc	r0, r25
 5ea:	08 95       	ret

000005ec <__fp_pscB>:
 5ec:	00 24       	eor	r0, r0
 5ee:	0a 94       	dec	r0
 5f0:	12 16       	cp	r1, r18
 5f2:	13 06       	cpc	r1, r19
 5f4:	14 06       	cpc	r1, r20
 5f6:	05 06       	cpc	r0, r21
 5f8:	08 95       	ret

000005fa <__fp_round>:
 5fa:	09 2e       	mov	r0, r25
 5fc:	03 94       	inc	r0
 5fe:	00 0c       	add	r0, r0
 600:	11 f4       	brne	.+4      	; 0x606 <__fp_round+0xc>
 602:	88 23       	and	r24, r24
 604:	52 f0       	brmi	.+20     	; 0x61a <__fp_round+0x20>
 606:	bb 0f       	add	r27, r27
 608:	40 f4       	brcc	.+16     	; 0x61a <__fp_round+0x20>
 60a:	bf 2b       	or	r27, r31
 60c:	11 f4       	brne	.+4      	; 0x612 <__fp_round+0x18>
 60e:	60 ff       	sbrs	r22, 0
 610:	04 c0       	rjmp	.+8      	; 0x61a <__fp_round+0x20>
 612:	6f 5f       	subi	r22, 0xFF	; 255
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	8f 4f       	sbci	r24, 0xFF	; 255
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	08 95       	ret

0000061c <__fp_split3>:
 61c:	57 fd       	sbrc	r21, 7
 61e:	90 58       	subi	r25, 0x80	; 128
 620:	44 0f       	add	r20, r20
 622:	55 1f       	adc	r21, r21
 624:	59 f0       	breq	.+22     	; 0x63c <__fp_splitA+0x10>
 626:	5f 3f       	cpi	r21, 0xFF	; 255
 628:	71 f0       	breq	.+28     	; 0x646 <__fp_splitA+0x1a>
 62a:	47 95       	ror	r20

0000062c <__fp_splitA>:
 62c:	88 0f       	add	r24, r24
 62e:	97 fb       	bst	r25, 7
 630:	99 1f       	adc	r25, r25
 632:	61 f0       	breq	.+24     	; 0x64c <__fp_splitA+0x20>
 634:	9f 3f       	cpi	r25, 0xFF	; 255
 636:	79 f0       	breq	.+30     	; 0x656 <__fp_splitA+0x2a>
 638:	87 95       	ror	r24
 63a:	08 95       	ret
 63c:	12 16       	cp	r1, r18
 63e:	13 06       	cpc	r1, r19
 640:	14 06       	cpc	r1, r20
 642:	55 1f       	adc	r21, r21
 644:	f2 cf       	rjmp	.-28     	; 0x62a <__fp_split3+0xe>
 646:	46 95       	lsr	r20
 648:	f1 df       	rcall	.-30     	; 0x62c <__fp_splitA>
 64a:	08 c0       	rjmp	.+16     	; 0x65c <__fp_splitA+0x30>
 64c:	16 16       	cp	r1, r22
 64e:	17 06       	cpc	r1, r23
 650:	18 06       	cpc	r1, r24
 652:	99 1f       	adc	r25, r25
 654:	f1 cf       	rjmp	.-30     	; 0x638 <__fp_splitA+0xc>
 656:	86 95       	lsr	r24
 658:	71 05       	cpc	r23, r1
 65a:	61 05       	cpc	r22, r1
 65c:	08 94       	sec
 65e:	08 95       	ret

00000660 <__fp_zero>:
 660:	e8 94       	clt

00000662 <__fp_szero>:
 662:	bb 27       	eor	r27, r27
 664:	66 27       	eor	r22, r22
 666:	77 27       	eor	r23, r23
 668:	cb 01       	movw	r24, r22
 66a:	97 f9       	bld	r25, 7
 66c:	08 95       	ret

0000066e <__mulsf3>:
 66e:	0e 94 4a 03 	call	0x694	; 0x694 <__mulsf3x>
 672:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_round>
 676:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscA>
 67a:	38 f0       	brcs	.+14     	; 0x68a <__mulsf3+0x1c>
 67c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__fp_pscB>
 680:	20 f0       	brcs	.+8      	; 0x68a <__mulsf3+0x1c>
 682:	95 23       	and	r25, r21
 684:	11 f0       	breq	.+4      	; 0x68a <__mulsf3+0x1c>
 686:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_inf>
 68a:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_nan>
 68e:	11 24       	eor	r1, r1
 690:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_szero>

00000694 <__mulsf3x>:
 694:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_split3>
 698:	70 f3       	brcs	.-36     	; 0x676 <__mulsf3+0x8>

0000069a <__mulsf3_pse>:
 69a:	95 9f       	mul	r25, r21
 69c:	c1 f3       	breq	.-16     	; 0x68e <__mulsf3+0x20>
 69e:	95 0f       	add	r25, r21
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	55 1f       	adc	r21, r21
 6a4:	62 9f       	mul	r22, r18
 6a6:	f0 01       	movw	r30, r0
 6a8:	72 9f       	mul	r23, r18
 6aa:	bb 27       	eor	r27, r27
 6ac:	f0 0d       	add	r31, r0
 6ae:	b1 1d       	adc	r27, r1
 6b0:	63 9f       	mul	r22, r19
 6b2:	aa 27       	eor	r26, r26
 6b4:	f0 0d       	add	r31, r0
 6b6:	b1 1d       	adc	r27, r1
 6b8:	aa 1f       	adc	r26, r26
 6ba:	64 9f       	mul	r22, r20
 6bc:	66 27       	eor	r22, r22
 6be:	b0 0d       	add	r27, r0
 6c0:	a1 1d       	adc	r26, r1
 6c2:	66 1f       	adc	r22, r22
 6c4:	82 9f       	mul	r24, r18
 6c6:	22 27       	eor	r18, r18
 6c8:	b0 0d       	add	r27, r0
 6ca:	a1 1d       	adc	r26, r1
 6cc:	62 1f       	adc	r22, r18
 6ce:	73 9f       	mul	r23, r19
 6d0:	b0 0d       	add	r27, r0
 6d2:	a1 1d       	adc	r26, r1
 6d4:	62 1f       	adc	r22, r18
 6d6:	83 9f       	mul	r24, r19
 6d8:	a0 0d       	add	r26, r0
 6da:	61 1d       	adc	r22, r1
 6dc:	22 1f       	adc	r18, r18
 6de:	74 9f       	mul	r23, r20
 6e0:	33 27       	eor	r19, r19
 6e2:	a0 0d       	add	r26, r0
 6e4:	61 1d       	adc	r22, r1
 6e6:	23 1f       	adc	r18, r19
 6e8:	84 9f       	mul	r24, r20
 6ea:	60 0d       	add	r22, r0
 6ec:	21 1d       	adc	r18, r1
 6ee:	82 2f       	mov	r24, r18
 6f0:	76 2f       	mov	r23, r22
 6f2:	6a 2f       	mov	r22, r26
 6f4:	11 24       	eor	r1, r1
 6f6:	9f 57       	subi	r25, 0x7F	; 127
 6f8:	50 40       	sbci	r21, 0x00	; 0
 6fa:	9a f0       	brmi	.+38     	; 0x722 <__mulsf3_pse+0x88>
 6fc:	f1 f0       	breq	.+60     	; 0x73a <__mulsf3_pse+0xa0>
 6fe:	88 23       	and	r24, r24
 700:	4a f0       	brmi	.+18     	; 0x714 <__mulsf3_pse+0x7a>
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	bb 1f       	adc	r27, r27
 708:	66 1f       	adc	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	91 50       	subi	r25, 0x01	; 1
 710:	50 40       	sbci	r21, 0x00	; 0
 712:	a9 f7       	brne	.-22     	; 0x6fe <__mulsf3_pse+0x64>
 714:	9e 3f       	cpi	r25, 0xFE	; 254
 716:	51 05       	cpc	r21, r1
 718:	80 f0       	brcs	.+32     	; 0x73a <__mulsf3_pse+0xa0>
 71a:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_inf>
 71e:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_szero>
 722:	5f 3f       	cpi	r21, 0xFF	; 255
 724:	e4 f3       	brlt	.-8      	; 0x71e <__mulsf3_pse+0x84>
 726:	98 3e       	cpi	r25, 0xE8	; 232
 728:	d4 f3       	brlt	.-12     	; 0x71e <__mulsf3_pse+0x84>
 72a:	86 95       	lsr	r24
 72c:	77 95       	ror	r23
 72e:	67 95       	ror	r22
 730:	b7 95       	ror	r27
 732:	f7 95       	ror	r31
 734:	e7 95       	ror	r30
 736:	9f 5f       	subi	r25, 0xFF	; 255
 738:	c1 f7       	brne	.-16     	; 0x72a <__mulsf3_pse+0x90>
 73a:	fe 2b       	or	r31, r30
 73c:	88 0f       	add	r24, r24
 73e:	91 1d       	adc	r25, r1
 740:	96 95       	lsr	r25
 742:	87 95       	ror	r24
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret

00000748 <_exit>:
 748:	f8 94       	cli

0000074a <__stop_program>:
 74a:	ff cf       	rjmp	.-2      	; 0x74a <__stop_program>
